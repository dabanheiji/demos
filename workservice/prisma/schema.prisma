// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username      String @db.VarChar(50) @unique
  password String @db.VarChar(50)
  email     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exams     Exam[]
  answers   Answer[]
  examsUser ExamUser[]
  roles     RoleUser[]
}

model Role {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  code String @db.VarChar(50)
  description String @db.Text @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users RoleUser[]
}

model RoleUser {
  id Int @id @default(autoincrement())
  roleId Int
  role Role @relation(fields: [roleId], references: [id])

  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  name      String @db.VarChar(50) @unique
  isPublished Boolean @default(false)
  isDeleted Boolean @default(false)
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createUserId Int
  createUser User @relation(fields: [createUserId], references: [id])

  answers   Answer[]
  questions ExamQuestion[]
  examsUser ExamUser[]
}

model ExamUser {
  id Int @id @default(autoincrement())
  examId Int
  exam Exam @relation(fields: [examId], references: [id])

  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Answer {
  id Int @id @default(autoincrement())
  content String @db.Text
  score Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answererId Int
  answerer User @relation(fields: [answererId], references: [id])

  examId Int
  exam Exam @relation(fields: [examId], references: [id])
}

model Question {
  id Int @id @default(autoincrement())
  type String @db.VarChar(50)
  content String @db.Text
  options String @db.Text
  answer String @db.VarChar(1000)
  analysis String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String @db.VarChar(50)
  updatedBy String @db.VarChar(50)

  exams ExamQuestion[]
}

model ExamQuestion {
  id Int @id @default(autoincrement())
  examId Int
  exam Exam @relation(fields: [examId], references: [id])

  questionId Int
  question Question @relation(fields: [questionId], references: [id])
}